import org.ajoberstar.grgit.*
import org.ajoberstar.grgit.operation.*

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'nathandunn' at '3/14/16 12:08 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.4.2'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


ant.importBuild 'build.xml'

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
//apply plugin: "de.qaware.seu.as.code.git"

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
//    compile 'org.slf4j:slf4j-api:1.7.14'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
//    testCompile 'junit:junit:4.12'
}


def jbrowseConfig
def jbrowsePlugins
def jbrowseDirectory = "jbrowse-download"
def pluginsDirectory = "${jbrowseDirectory}/plugins"
def currentPlugin



task evaluateJBrowseConfigs {
    // gradle read in Config.groovy
    def config = new ConfigSlurper().parse(new File("grails-app/conf/Config.groovy").toURI().toURL())
    jbrowseConfig = config.jbrowse
    jbrowsePlugins = jbrowseConfig.plugins
    // if apollo-config.groovy exists, read THAT in and apply it as well
    File testFile = new File("apollo-config.groovy")
    def revisedConfig
    if (testFile.exists()) {
        revisedConfig = new ConfigSlurper().parse(new File("apollo-config.groovy").toURI().toURL())
    } else {
        Class scriptClass = getClass().classLoader.loadClass('apollo-config.groovy')
        revisedConfig = new ConfigSlurper().parse(scriptClass)
    }

    if (revisedConfig) {
        jbrowseConfig = revisedConfig.jbrowse ?: jbrowseConfig
        jbrowsePlugins << revisedConfig.jbrowse.plugins
    }

    println "final JBrowse settings ${jbrowseConfig}"
    println "final plugins ${jbrowsePlugins}"
}

task copyResourcesDev(dependsOn: "copy-resources-dev") << {

}

task installJBrowse << {
    println "installing jbrowse ${jbrowseConfig}"

    if (jbrowseConfig.git) {
        def git = jbrowseConfig.git
        File jbrowseFile = new File(jbrowseDirectory)
        if (jbrowseFile.exists()) {
//            def grgit = Grgit.open(currentDir: jbrowseDirectory)
            if (git.alwaysRecheck || git.alwaysPull) {
                if (git.tag) {
                    fetchTags(jbrowseFile)
                    checkoutBranch(jbrowseFile,"tags/"+git.tag)
                } else if (git.branch) {
                    checkoutBranch(jbrowseFile,git.branch)
                }
                if (git.alwaysPull && git.branch) {
                    println "Pulling ${git.url}"
//                    grgit.pull(rebase: false)
                    "git pull".execute()
                    gitPull(jbrowseFile)
                }
//                grgit.build()
            }
        } else {
            println "Cloning: ${git.url} into ${jbrowseDirectory}."
            def branch = git.branch ?: (git.tag ? "tags/${git.tag}" : null)
            cloneRepo(git.url, jbrowseDirectory, branch, 1)
            checkoutBranch(jbrowseFile,branch)
        }
    } else if (jbrowseConfig.url) {
        def f = new File(jbrowseDirectory)
        new URL(jbrowseConfig.url.url).withInputStream { i -> f.withOutputStream { it << i } }
    }
//    tasks["setup-jbrowse"]

    // TODO: checkout proper version and remove from other

    // TODO: pull if "always pull" is selected

//    tasks["copy-resources-dev"]
//    copyResourcesDev.execute()
}

task setupJBrowse(dependsOn: "setup-jbrowse") << {}


task installJBrowsePlugins << {
    println "installing jbrowse plugins  ${jbrowsePlugins}"

    for (plugin in jbrowsePlugins) {
        currentPlugin = plugin
        def path = pluginsDirectory + "/" + plugin.key
        println "Evaluating plugin ${currentPlugin}"
        def pluginExists = confirmPlugin(path)
        if (plugin.value.included == true) {
            if (pluginExists) {
                println "Plugin ${path} exists and appears valid."
            } else {
                println "ERROR: There is a problem with the plugin at ${path}!"
                throw new StopExecutionException("Included plugin ${path} not found in build")
            }
        } else if (plugin.value.git) {
            println "Plugin is supplied by git"
            if (pluginExists) {
                println "Plugin ${path} exists and appears valid."
                def grgit = Grgit.open(currentDir: path)
                if (plugin.value.alwaysRecheck || plugin.value.alwaysPull) {
                    println "Checking out branch ${plugin.value.branch}"
                    if (plugin.value.tag) {
                        grgit.checkout(createBranch: false, branch: "tags/" + plugin.value.tag)
                    } else if (plugin.value.branch) {
                        grgit.checkout(createBranch: false, branch: plugin.value.branch)
                    }

                    if (plugin.value.alwaysPull) {
                        println "Pulling ${plugin.value.git}"
                        grgit.pull(rebase: false)
                    }
                }
            } else {
                println "Cloning '${plugin.value.git}' into '${path}'"
//                def grgit = Grgit.clone(dir: path, uri: plugin.value.git, refToCheckout: plugin.value.branch)
//                Grgit.open()
                cloneRepo(plugin.value.git, path, plugin.value.branch)
                println "CLONED from ${plugin.value.git} into ${path}"
            }
        } else if (plugin.value.url == true) {
            // TODO: test
            if (!pluginExists) {
                println "Plugin ${path} exists and appears valid . . . downloading."
                def f = new File(path)
                new URL(plugin.value.url).withInputStream { i -> f.withOutputStream { it << i } }
            }
        } else {
            throw new StopExecutionException("Invalid plugin settings for ${path}")
        }
    }
}

// root task
task handleJBrowse(dependsOn: ['evaluateJBrowseConfigs', 'installJBrowse', 'installJBrowsePlugins']) {
    println "handling jbrowse ${jbrowseConfig}"

    doLast {
        setupJBrowse
        copyResourcesDev
    }

}

def confirmPlugin(String path) {
    File file = new File(path)
    return file.exists() && file.isDirectory() && file.canRead()
}

def cloneRepo(String url, String directory, String branch) {
    cloneRepo(url, directory, branch, null)
}

def cloneRepo(String url, String directory, String branch, Integer depth) {
    String depthString = depth != null && depth > 0 ? " --recursive --depth ${depth} " : ""
    def commandToExecute = "git clone ${depthString} ${url} ${directory} "
    println "command to execute [${commandToExecute}]"
    def proc = commandToExecute.execute()
    def outputStream = new StringBuffer();
    def errorStream = new StringBuffer();
    proc.waitForProcessOutput(outputStream, errorStream);
    println outputStream
    println errorStream
//
    "cd ${directory}".execute()
    "git checkout ${branch}".execute()

}

def fetchTags(File file) {
    println "fetching tags"
    def processBuilder = new ProcessBuilder()
    processBuilder.redirectErrorStream(true)
    processBuilder.directory(file)
    processBuilder.command("git","fetch","--tags")
    def proc = processBuilder.start()
    def outputStream = new StringBuffer();
    def errorStream = new StringBuffer();
    proc.waitForProcessOutput(outputStream, errorStream);
    println "Out: " +outputStream
    println "Error: " +errorStream
}


def checkoutBranch(File file, String branch) {
    println "checkout out branch ${branch}"
    def processBuilder = new ProcessBuilder()
    processBuilder.redirectErrorStream(true)
    processBuilder.directory(file)
    processBuilder.command("git","checkout",branch)
    def proc = processBuilder.start()
    def outputStream = new StringBuffer();
    def errorStream = new StringBuffer();
    proc.waitForProcessOutput(outputStream, errorStream);
    println "Out: " +outputStream
    println "Error: " +errorStream

}

def gitPull(File file) {
    println "git pull ${file.absolutePath}"
    def processBuilder = new ProcessBuilder()
    processBuilder.redirectErrorStream(true)
    processBuilder.directory(file)
    processBuilder.command("git","pull")
    def proc = processBuilder.start()
    def outputStream = new StringBuffer();
    def errorStream = new StringBuffer();
    proc.waitForProcessOutput(outputStream, errorStream);
    println "Out: " +outputStream
    println "Error: " +errorStream
}