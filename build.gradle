import org.ajoberstar.grgit.*

/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'nathandunn' at '3/14/16 12:08 PM' with Gradle 2.11
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.11/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.4.2'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


ant.importBuild 'build.xml'

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
//apply plugin: "de.qaware.seu.as.code.git"

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
//    compile 'org.slf4j:slf4j-api:1.7.14'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
//    testCompile 'junit:junit:4.12'
}


def jbrowseConfig
def jbrowsePlugins
def pluginsDirectory = "jbrowse-download/plugins"
def currentPlugin


task cloneTask(type: CloneTask)

class CloneTask extends DefaultTask {

    @TaskAction
    def clone() {
        def grgit = Grgit.clone(dir: 'asdf', uri: 'https://github.com/GMOD/myvariantviewer')
    }
}


task evaluateJBrowseConfigs {
    // gradle read in Config.groovy
    def config = new ConfigSlurper().parse(new File("grails-app/conf/Config.groovy").toURI().toURL())
    jbrowseConfig = config.jbrowse
    jbrowsePlugins = jbrowseConfig.plugins
    // if apollo-config.groovy exists, read THAT in and apply it as well
    File testFile = new File("apollo-config.groovy")
    if (testFile) {
        def revisedConfig = new ConfigSlurper().parse(new File("apollo-config.groovy").toURI().toURL())
        jbrowseConfig = revisedConfig.jbrowse ?: jbrowseConfig
        jbrowsePlugins << revisedConfig.jbrowse.plugins
    }
    println "final JBrowse settings ${jbrowseConfig}"

    println "final plugins ${jbrowsePlugins}"
}

task copyResourcesDev(dependsOn: "copy-resources-dev") << {

}

task installJBrowse(dependsOn: "setup-jbrowse") << {
    println "installing jbrowse ${jbrowseConfig}"
//    tasks["setup-jbrowse"]

    // TODO: checkout proper version and remove from other

    // TODO: pull if "always pull" is selected

//    tasks["copy-resources-dev"]
//    copyResourcesDev.execute()
}

task setupJBrowse(dependsOn: "setup-jbrowse") << {}


task installJBrowsePlugins << {
    println "installing jbrowse plugins  ${jbrowsePlugins}"

    for (plugin in jbrowsePlugins) {
        currentPlugin = plugin
        def path = pluginsDirectory + "/" + plugin.key
        def pluginExists = confirmPlugin(path)
        if (plugin.value.included == true) {
            if (pluginExists) {
                println "Plugin ${path} exists and appears valid."
            } else {
                println "ERROR: There is a problem with the plugin at ${path}!"
                throw new StopExecutionException("Included plugin ${path} not found in build")
            }
        } else if (plugin.value.git) {
            println "Plugin is supplied by git"
            if (pluginExists) {
                println "Plugin ${path} exists and appears valid."
                def grgit = Grgit.open(currentDir: path )
                if(plugin.value.alwaysRecheck || plugin.value.alwaysPull){
                    println "Checking out branch ${plugin.value.branch}"
                    grgit.checkout(createBranch:false,branch:plugin.value.branch)

                    if(plugin.value.alwaysPull){
                        println "Pulling"
                        grgit.pull(rebase:false)
                    }
                }


            } else {
                println "git clone to the proper directory"
                println "cloning from ${plugin.value.git} into ${path}"
                currentPlugin = plugin
                println "current plugin ${currentPlugin}"
                println "attemptping to clone from '${plugin.value.git}' into '${path}'"
                def grgit = Grgit.clone(dir: path , uri: plugin.value.git,refToCheckout:plugin.value.branch)
                println "CLONED from ${plugin.value.git} into ${path}"
            }
        }
        else if (plugin.value.url == true) {
            // TODO: test
            if (!pluginExists) {
                println "Plugin ${path} exists and appears valid . . . downloading."
                def f = new File(path)
                new URL(plugin.value.url).withInputStream{ i -> f.withOutputStream{ it << i }}
            }
        } else {
            throw new StopExecutionException("Invalid plugin settings for ${path}")
        }
    }
}

// root task
task handleJBrowse(dependsOn: ['evaluateJBrowseConfigs', 'installJBrowse', 'installJBrowsePlugins', "copyResourcesDev"]) << {
    println "handling jbrowse ${jbrowseConfig}"

}

def confirmPlugin(String path) {
    File file = new File(path)
    return file.exists() && file.isDirectory() && file.canRead()
}

